name: Terraform

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Runner for APPLY"
        required: true
        default: windows
        type: choice
        options: [windows, mac]
  push:
    branches: [ "main" ]
    paths: [ "infra/**", ".github/workflows/terraform.yml" ]
  pull_request:
    paths: [ "infra/**", ".github/workflows/terraform.yml" ]

permissions:
  id-token: write # nodig voor OIDC
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  apply-windows:
    name: Apply (Windows self-hosted)
    runs-on: [self-hosted, windows]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.target == 'windows'))
    defaults:
      run:
        shell: powershell
        working-directory: infra/envs/dev
    steps:
      - uses: actions/checkout@v4

      #OIDC
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -reconfigure `
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" `
            -backend-config="key=envs/${{ vars.ENV }}/terraform.tfstate" `
            -backend-config="region=${{ secrets.AWS_REGION }}" `
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: >
          terraform apply -input=false -auto-approve
          -var "vpc_id=${{ vars.VPC_ID }}"
          -var "subnet_id=${{ vars.SUBNET_ID }}"
          -var "my_ip_cidr=${{ vars.MY_IP_CIDR }}"
          -var "env=${{ vars.ENV }}"

  apply-mac:
    name: Apply (macOS self-hosted)
    runs-on: [self-hosted, mac]   
    if: github.event_name == 'workflow_dispatch' && inputs.target == 'mac'
    defaults:
      run:
        shell: bash
        working-directory: infra/envs/dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=envs/${{ vars.ENV }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: >
          terraform apply -input=false -auto-approve
          -var "vpc_id=${{ vars.VPC_ID }}"
          -var "subnet_id=${{ vars.SUBNET_ID }}"
          -var "my_ip_cidr=${{ vars.MY_IP_CIDR }}"
          -var "env=${{ vars.ENV }}"

  plan-pr:
    name: Plan (PR)
    runs-on: [self-hosted, mac]   
    if: github.event_name == 'pull_request'
    defaults:
      run:
        shell: bash
        working-directory: infra/envs/dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=envs/${{ vars.ENV }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: >
          terraform plan -input=false -no-color -out=tfplan
          -var "vpc_id=${{ vars.VPC_ID }}"
          -var "subnet_id=${{ vars.SUBNET_ID }}"
          -var "my_ip_cidr=${{ vars.MY_IP_CIDR }}"
          -var "env=${{ vars.ENV }}"
