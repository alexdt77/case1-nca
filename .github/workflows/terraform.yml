name: Terraform

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Runner"
        required: true
        default: mac
        type: choice
        options: [mac]
  push:
    branches: ["main"]
    paths: ["infra/**", ".github/workflows/terraform.yml"]
  pull_request:
    paths: ["infra/**", ".github/workflows/terraform.yml"]

permissions:
  id-token: write     # nodig voor OIDC
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  TF_IN_AUTOMATION: true

jobs:
  apply-mac:
    name: Apply (macOS self-hosted)
    runs-on: [self-hosted, mac]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    defaults:
      run:
        shell: bash
        working-directory: infra/envs/dev

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Sanity check AWS identity/region
        run: |
          echo "AWS_REGION=$AWS_REGION"
          echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION"
          aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Fmt
        run: terraform fmt -recursive -check || true

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=envs/${{ vars.ENV }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        env:
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
          TF_VAR_db_password_secret_name: ${{ secrets.TF_VAR_DB_PASSWORD_SECRET_NAME }}
        run: >
          terraform apply -input=false -auto-approve -lock-timeout=5m
          -var "vpc_id=${{ vars.VPC_ID }}"
          -var "subnet_id=${{ vars.SUBNET_ID }}"
          -var "my_ip_cidr=${{ vars.MY_IP_CIDR }}"
          -var "env=${{ vars.ENV }}"
          -var "db_master_username=appadmin"


  plan-pr:
    name: Plan (PR)
    runs-on: [self-hosted, mac]
    if: github.event_name == 'pull_request'
    defaults:
      run:
        shell: bash
        working-directory: infra/envs/dev

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Sanity check AWS identity/region
        run: |
          echo "AWS_REGION=$AWS_REGION"
          echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION"
          aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Fmt
        run: terraform fmt -recursive -check || true

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=envs/${{ vars.ENV }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        env:
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
          TF_VAR_db_password_secret_name: ${{ secrets.TF_VAR_DB_PASSWORD_SECRET_NAME }}
        run: >
          terraform plan -input=false -no-color -out=tfplan -lock-timeout=5m
          -var "vpc_id=${{ vars.VPC_ID }}"
          -var "subnet_id=${{ vars.SUBNET_ID }}"
          -var "my_ip_cidr=${{ vars.MY_IP_CIDR }}"
          -var "env=${{ vars.ENV }}"
          -var "db_master_username=appadmin"
